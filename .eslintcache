[{"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/index.tsx":"1","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/reportWebVitals.ts":"2","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/App.tsx":"3","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/login.tsx":"4","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/playlist.tsx":"5","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/song.tsx":"6","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/songs.tsx":"7","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/playlists.tsx":"8","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/home.tsx":"9","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/BarChart.tsx":"10","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/player.tsx":"11"},{"size":500,"mtime":1608169232882,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1608169232897,"results":"14","hashOfConfig":"13"},{"size":940,"mtime":1608169232817,"results":"15","hashOfConfig":"13"},{"size":2538,"mtime":1608169232838,"results":"16","hashOfConfig":"13"},{"size":2225,"mtime":1608173595547,"results":"17","hashOfConfig":"13"},{"size":1883,"mtime":1608173935293,"results":"18","hashOfConfig":"13"},{"size":1902,"mtime":1608169232870,"results":"19","hashOfConfig":"13"},{"size":2249,"mtime":1608169232854,"results":"20","hashOfConfig":"13"},{"size":426,"mtime":1608169232831,"results":"21","hashOfConfig":"13"},{"size":928,"mtime":1608169232825,"results":"22","hashOfConfig":"13"},{"size":3636,"mtime":1608173737678,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1op6s6p",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/index.tsx",[],["54","55"],"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/reportWebVitals.ts",[],"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/App.tsx",[],"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/login.tsx",["56","57","58","59","60"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Spotify {\r\n  display_name: string,\r\n  id: string,\r\n  email: string,\r\n  external_urls: any,\r\n  href: string,\r\n  images: any,\r\n  country: string\r\n}\r\n\r\nconst Login = (props: any):JSX.Element => {\r\n  const [ token, setToken ] = useState(undefined);\r\n  const [ exResp, setExResp ] = useState(undefined);\r\n\r\n  function getHashParams() {\r\n    var hashParams: any = {};\r\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n        q = window.location.hash.substring(1);\r\n    while ( e = r.exec(q)) {\r\n       hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  }\r\n\r\n  const makeRequest = async (tok: string) => {\r\n    try {\r\n      const reqUrl = 'https://api.spotify.com/v1/me';\r\n      const { data } = await axios.get(reqUrl, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + tok \r\n        }\r\n       });\r\n\t\t\treturn data;\r\n\t\t} catch(e) {\r\n\t\t\tthrow new Error(\"Request failed\");\r\n\t\t}\r\n  }\r\n\r\n  useEffect(\r\n    () => {\r\n      async function auth() {\r\n        try {\r\n          let params = getHashParams();\r\n          console.log(params);\r\n          let access_token = params.access_token;\r\n          let refresh_token = params.refresh_token;\r\n\r\n          setToken(access_token);\r\n\r\n          let resp = await makeRequest(access_token);\r\n\r\n          setExResp(resp);\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n      }\r\n      auth();\r\n    },\r\n    []\r\n  )\r\n  let noBody = 'Goodbye!';\r\n\treturn (\r\n\t\t<div>\r\n      <h1>\r\n        Login Page\r\n      </h1>\r\n\r\n      <Link className='link' to='/login'>\r\n        Home\r\n      </Link>\r\n      <Link className='link' to={{\r\n        pathname: \"/playlists\",\r\n        state: [{ token: token}]\r\n      }}>\r\n        Playlists\r\n      </Link>\r\n      \r\n\r\n      {/* {exResp !== undefined && token !== undefined ? \r\n      <div>\r\n         <dl>\r\n            <dt>Display name</dt><dd>{exResp1.display_name}</dd>\r\n            <dt>Id</dt><dd>{exResp.id}</dd>\r\n            <dt>Email</dt><dd>{exResp.email}</dd>\r\n            <dt>Spotify URI</dt><dd><a href={exResp.external_urls.spotify}>{exResp.external_urls.spotify}</a></dd>\r\n            <dt>Link</dt><dd><a href={exResp.href}>{exResp.href}</a></dd>\r\n            <dt>Profile Image</dt><dd><a href={exResp.images[0].url}>{exResp.images[0].url}</a></dd>\r\n            <dt>Country</dt><dd>{exResp.country}</dd>\r\n          </dl>\r\n      </div>\r\n      : noBody} */}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/playlist.tsx",["61","62"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Fake data for testing\r\nconst fakeData:object=\r\n\t{id:1,\r\n\tname:\"playlist1\",\r\n\ttracks:[{id:1,name:\"track1\"},{id:2,name:\"track2\"},{id:3,name:\"track3\"}]\r\n\t}\r\n\r\nconst Playlist = (props:any) =>{\r\n    const [ loading, setLoading ] = useState<boolean>(true);\r\n    const [ playlistData, setPlaylistData]=useState<any>([]);\r\n    const [ id\t, setId ] = useState<number>(NaN);\r\n\tlet list:Array<object> = [];\r\n\t\r\n    //load\r\n    useEffect(():void => {\r\n\t\tasync function fetchData() {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconsole.log('e');\r\n\r\n\t\t\tconst playlistResp = await axios.get('http://localhost:8888/spotify-playlist?tok='+props.location.state[0].token+'&id='+props.match.params.id);\r\n\t\t\tconst playlist = playlistResp['data'];\r\n\t\t\tconsole.log(playlist);\r\n\t\t\tsetPlaylistData(playlist)\r\n\t\t\t//Check if pagenum is valid and in bounds, if invalid or out of bounds goto page 0, need api call for bounds\r\n\t\t\tsetId(props.match.params.id)\r\n\r\n\t\t\tsetLoading(false)\r\n\t\t\t\r\n\t\t}\r\n\t\tfetchData();\r\n    }, [props.match.params.id]); \r\n    \r\n\t//Builds list of character links\r\n\t//TODO: Make prettier, probably put everthing for each playlist into its own rectange with the album cover on the left or something\r\n    const buildList = (song:any) => {\r\n\t\treturn (\r\n\t\t\t<li key={song.id}><Link className=\"siteLink\"  \r\n\t\t\t\tto={{\r\n\t\t\t\t\tpathname: `/songs/${song.track.id}`,\r\n\t\t\t\t\tstate: [{ token: props.location.state[0].token }]\r\n\t\t\t\t}}>{song.track.name}</Link> </li>\r\n\t\t);\r\n\t};\r\n\r\n    \r\n    if (loading) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Loading....</h2>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n    //Build list of songs in playlist\r\n    else{\r\n\t\tconst tracks:Array<any> =playlistData[\"tracks\"][\"items\"]\r\n        list =\r\n\t\t\ttracks &&\r\n\t\t\ttracks.map((song) => {\r\n\t\t\t\treturn buildList(song);\r\n\r\n    });\r\n\t\t\t//TODO: pagination\r\n            return (\r\n                <div>\r\n                    <h1>{playlistData[\"name\"]}: {id}</h1>\r\n\r\n                    <br />\r\n                    <br />\r\n                    <ul>\r\n                        {list}\r\n                    </ul>\r\n                </div>\r\n            );\r\n\r\n    }\r\n};\r\n\r\nexport default Playlist;\r\n","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/song.tsx",["63","64","65"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Player from './player';\r\nimport BarChart from './BarChart';\r\n\r\n//Fake data for testing\r\nconst fakeData: object =\r\n{\r\n\tid: 1,\r\n\tname: \"track1\",\r\n\talbum: \"album3\"\r\n}\r\n\r\nconst state: any = {\r\n\tdata: [120, 1, 7, 6, 9, 10],\r\n\twidth: 700,\r\n\theight: 500,\r\n\tid: \"root\"\r\n}\r\n\r\nconst Song = (props:any) =>{\r\n    const [ loading, setLoading ] = useState<boolean>(true);\r\n    const [ songData, setSongData]=useState<any>([]);\r\n\tconst [ id\t, setId ] = useState<number>(NaN);\r\n\tconst [ track, setTrack ] = useState<string>(\"\");\r\n\r\n\t//load\r\n\tuseEffect((): void => {\r\n\t\tasync function fetchData() {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst songResp: any = await axios.get('http://localhost:8888/spotify-song?tok='+props.location.state[0].token+'&id='+props.match.params.id);\r\n\t\t\tconst song: any = songResp['data'];\r\n\t\t\tsetSongData(song)\r\n\t\t\tsetTrack(song[\"uri\"]);\r\n\t\t\t//Check if pagenum is valid and in bounds, if invalid or out of bounds goto page 0, need api call for bounds\r\n\t\t\tsetId(props.match.params.id)\r\n\r\n\t\t\tsetLoading(false)\r\n\r\n\t\t}\r\n\t\tfetchData();\r\n\t}, [props.match.params.id]);\r\n\r\n\t//Builds list of character links\r\n\t//TODO: Make prettier, probably put everthing for each playlist into its own rectange with the album cover on the left or something\r\n\r\n\tconsole.log(songData);\r\n\r\n\tif (loading) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Loading....</h2>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\t//Build list of songs in playlist\t\t\t//TODO: pagination\r\n\telse {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Title</h1>\r\n\t\t\t\t<p>{songData[\"name\"]}: {id}</p>\r\n\t\t\t\t<h1>Album</h1>\r\n\t\t\t\t<p>{songData[\"album\"][\"name\"]}</p>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<Player token={props.location.state[0].token} uri={songData['uri']} />\r\n\t\t\t\t<BarChart data={state.data} height={state.height} width={state.width} id={state.id} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Song;\r\n","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/songs.tsx",[],"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/playlists.tsx",["66","67"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Fake data for testing\r\nconst fakeData:Array<object>=[\r\n\t{id:1,\r\n\tname:\"playlist1\"},\r\n\t{id:2,\r\n\t\tname:\"playlist2\"},\r\n\t{id:3,\r\n\tname:\"playlist3\"}\r\n]\r\n\r\nconst Playlists = (props:any) =>{\r\n    const [ loading, setLoading ] = useState<boolean>(true);\r\n    const [ playlistData, setPlaylistData]=useState<Array<object>>([]);\r\n    const [ pageNum, setPageNum ] = useState<number>(NaN);\r\n    let list:Array<object> = [];\r\n\r\n\tconst getPlayLists = async (tok: string) => {\r\n\t\ttry {\r\n\t\t\tconst reqUrl = 'https://api.spotify.com/v1/me/playlists';\r\n\t\t\tconst { data } = await axios.get(reqUrl, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'Bearer ' + tok\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tthrow new Error(\"Request failed\");\r\n\t\t}\r\n\t}\r\n\r\n    //load\r\n    useEffect(():void => {\r\n\t\tasync function fetchData() {\r\n\t\t\tsetLoading(true);\r\n\r\n\t\t\tconst playlists = await getPlayLists(props.location.state[0].token);\r\n\r\n\t\t\tconsole.log(playlists.items);\r\n\r\n\t\t\tsetPlaylistData(playlists.items);\r\n\t\t\t//Check if pagenum is valid and in bounds, if invalid or out of bounds goto page 0, need api call for bounds\r\n\t\t\tsetPageNum(props.match.params.pagenum);\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\t\r\n\t\t}\r\n\t\tfetchData();\r\n    }, [props.match.params.pagenum]); \r\n    \r\n\t//Builds list of playlists\r\n\t//TODO: Make prettier, probably put everthing for each playlist into its own rectange with the album cover on the left or something\r\n    const buildList = (playlist:any) => {\r\n\t\treturn (\r\n\t\t\t<li key={playlist.id}><Link className=\"siteLink\" to={{\r\n\t\t\t\tpathname: `/playlists/${playlist.id}`,\r\n\t\t\t\tstate: [{ token: props.location.state[0].token }]\r\n\t\t\t}}>{playlist.name}</Link> </li>\r\n\t\t);\r\n\t};\r\n\r\n    \r\n    if (loading) {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Loading....</h2>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n    //Build list of playlists\r\n    else{\r\n        list =\r\n\t\t\tplaylistData &&\r\n\t\t\tplaylistData.map((playlist) => {\r\n\t\t\t\treturn buildList(playlist);\r\n\r\n    });\r\n\t\t//TODO: pagination\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Playlists Page: {pageNum}</h1>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{list}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n    }\r\n};\r\n\r\nexport default Playlists;\r\n","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/home.tsx",["68"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\nconst Home = ():JSX.Element => {\r\n\t//TODO: make it so homepage redirects you to playlists if logged in.\r\n\t//No api calls needed\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>\r\n\t\t\t\tWelcome to Spotify Playlist Website\r\n\t\t\t</h1>\r\n\t\t\t<a href=\"http://localhost:8888/login\">\r\n\t\t\t\tLogin with Spotify\r\n\t\t\t</a>\r\n\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;\r\n","/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/BarChart.tsx",[],["69","70"],"/mnt/c/Users/Jared/Documents/SIT/20f/cs554/final/cs554-final/src/components/player.tsx",["71"],"import { useEffect, useState } from 'react';\nimport '../App.css';\n\nconst Player = (props: any): JSX.Element => {\n    const [playerReady, setPlayerReady] = useState(false);\n    const [playbackOn, setPlaybackOn] = useState(false);\n    const [playbackPaused, setPlaybackPaused] = useState(true);\n    const [spotifyDeviceId, setDeviceId] = useState<string>();\n\n    let spotifyPlayer: Spotify.SpotifyPlayer;\n\n    console.log('Token:', props.token);\n    console.log('Song ID:', props.uri);\n\n    const createPlayer = () => {\n        // Create the player object\n        const player = new Spotify.Player({\n            name: 'Spotify Web Player',\n            getOAuthToken: cb => { cb(props.token) }\n        })\n        console.log('Player has been created');\n        spotifyPlayer = player;\n\n        // Ready\n        spotifyPlayer?.addListener('ready', ({ device_id }) => {\n            console.log('Web Device ID:', device_id);\n            setDeviceId(device_id);\n        });\n\n        spotifyPlayer?.addListener('not_ready', ({ device_id }) => {\n            console.log('Device ID is not ready for playback', device_id);\n        });\n\n        // Connect\n        spotifyPlayer?.connect().then(() => {\n            console.log('Spotify Web Player Connected');\n            setPlayerReady(true);\n        });\n\n    };\n\n    useEffect(() => {\n        // Add script to body of document\n        const script = document.createElement('script');\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n        // Add listener for onLoad event\n        window.onSpotifyWebPlaybackSDKReady = () => {\n            createPlayer();\n        };\n        document.body.appendChild(script);\n        return () => {\n            document.body.removeChild(script);\n        }\n    }, []);\n\n    const pauseTrack = () => {\n        fetch(\"https://api.spotify.com/v1/me/player/pause?device_id=\" + spotifyDeviceId, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.token\n            },\n        }).then((ev) => {\n            setPlaybackPaused(true);\n            setPlaybackOn(false);\n        })\n    }\n\n    const startPlayback = (spotify_uri: string) => {\n        console.log('Device ID:', spotifyDeviceId)\n        const url: string = 'https://api.spotify.com/v1/me/player/play?device_id=' + spotifyDeviceId;\n        fetch(url, {\n            method: 'PUT',\n            body: JSON.stringify({ uris: [spotify_uri] }),\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + props.token\n            },\n        });\n        setPlaybackOn(true);\n        setPlaybackPaused(false);\n        console.log('playing a song?')\n    }\n\n    return (\n        <div>\n            <div>\n                {playerReady &&\n                    <div onClick={() => {\n                        if (!playbackOn) {\n                            startPlayback(props.uri);\n                        } else {\n                            if (playbackPaused) {\n                                startPlayback(props.uri);\n                            }\n                        }\n                    }}>\n                        <p>Play</p>\n                    </div>}\n                {playerReady && playbackOn &&\n                    <div onClick={() => {\n                        if (!playbackPaused) {\n                            pauseTrack();\n                        }\n                    }}>\n                        <p>Pause</p>\n                    </div>}\n            </div>\n        </div>\n    );\n};\n\nexport default Player;",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":11,"nodeType":"78","messageId":"79","endLine":6,"endColumn":18},{"ruleId":"76","severity":1,"message":"80","line":18,"column":11,"nodeType":"78","messageId":"79","endLine":18,"endColumn":17},{"ruleId":"81","severity":1,"message":"82","line":24,"column":13,"nodeType":"83","messageId":"84","endLine":24,"endColumn":26},{"ruleId":"76","severity":1,"message":"85","line":51,"column":15,"nodeType":"78","messageId":"79","endLine":51,"endColumn":28},{"ruleId":"76","severity":1,"message":"86","line":67,"column":7,"nodeType":"78","messageId":"79","endLine":67,"endColumn":13},{"ruleId":"76","severity":1,"message":"87","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":22},{"ruleId":"88","severity":1,"message":"89","line":35,"column":8,"nodeType":"90","endLine":35,"endColumn":31,"suggestions":"91"},{"ruleId":"76","severity":1,"message":"87","line":7,"column":7,"nodeType":"78","messageId":"79","endLine":7,"endColumn":23},{"ruleId":"76","severity":1,"message":"92","line":25,"column":10,"nodeType":"78","messageId":"79","endLine":25,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":42,"column":5,"nodeType":"90","endLine":42,"endColumn":28,"suggestions":"93"},{"ruleId":"76","severity":1,"message":"87","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":29},{"ruleId":"88","severity":1,"message":"89","line":52,"column":8,"nodeType":"90","endLine":52,"endColumn":36,"suggestions":"94"},{"ruleId":"76","severity":1,"message":"95","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"72","replacedBy":"96"},{"ruleId":"74","replacedBy":"97"},{"ruleId":"88","severity":1,"message":"98","line":55,"column":8,"nodeType":"90","endLine":55,"endColumn":10,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"@typescript-eslint/no-unused-vars","'Spotify' is defined but never used.","Identifier","unusedVar","'exResp' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'refresh_token' is assigned a value but never used.","'noBody' is assigned a value but never used.","'fakeData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'track' is assigned a value but never used.",["103"],["104"],"'Link' is defined but never used.",["100"],["101"],"React Hook useEffect has a missing dependency: 'createPlayer'. Either include it or remove the dependency array.",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"106","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [props.location.state, props.match.params.id]",{"range":"113","text":"114"},{"range":"115","text":"114"},"Update the dependencies array to be: [props.location.state, props.match.params.pagenum]",{"range":"116","text":"117"},"Update the dependencies array to be: [createPlayer]",{"range":"118","text":"119"},[1096,1119],"[props.location.state, props.match.params.id]",[1124,1147],[1321,1349],"[props.location.state, props.match.params.pagenum]",[1778,1780],"[createPlayer]"]